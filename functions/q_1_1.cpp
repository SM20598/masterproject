//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// q_1_1.cpp
//
// Code generation for function 'q_1_1'
//

// Include files
#include "q_1_1.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void q_1_1(const double in1[4], double l, double, double m, double E,
           double Jxx, double qvec[2])
{
  double b_qvec_tmp;
  double qvec_tmp;
  double qvec_tmp_tmp;
  double t10;
  double t2;
  double t3;
  double t4;
  double t5;
  double t7;
  double t9;
  // Q_1_1
  //     QVEC = Q_1_1(IN1,L,R,M,E,Jxx)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Apr-2023 16:47:31
  t2 = in1[0] * in1[0];
  t3 = in1[1] * in1[1];
  t4 = t2 + t3;
  t5 = 1.0 / t4;
  t4 = std::sqrt(t4);
  t7 = 1.0 / rt_powd_snf(t4, 3.0);
  t4 *= l;
  t9 = std::cos(t4);
  t10 = std::sin(t4);
  qvec_tmp_tmp = E * Jxx;
  qvec_tmp = qvec_tmp_tmp * in1[0];
  b_qvec_tmp = t4 - t10;
  qvec[0] = (m * (in1[0] * t7 * t10 - in1[0] * l * t5 * t9) * 9.81 -
             qvec_tmp * t7 * (t2 * t4 + t3 * t10)) -
            qvec_tmp * t3 * t7 * b_qvec_tmp;
  qvec[1] = (m * (t7 * t10 * in1[1] - l * t5 * t9 * in1[1]) * 9.81 -
             qvec_tmp_tmp * t7 * in1[1] * (t3 * t4 + t2 * t10)) -
            qvec_tmp_tmp * t2 * t7 * in1[1] * b_qvec_tmp;
}

// End of code generation (q_1_1.cpp)
