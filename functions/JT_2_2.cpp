//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// JT_2_2.cpp
//
// Code generation for function 'JT_2_2'
//

// Include files
#include "JT_2_2.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void JT_2_2(double l, const double in2[8], double JT[12])
{
  double b_t31_tmp;
  double b_t41_tmp;
  double b_t42_tmp;
  double c_t31_tmp;
  double d_t31_tmp;
  double e_t31_tmp;
  double f_t31_tmp;
  double g_t31_tmp;
  double h_t31_tmp;
  double i_t31_tmp;
  double j_t31_tmp;
  double t10;
  double t11;
  double t12;
  double t14;
  double t15;
  double t16;
  double t17;
  double t2;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t28;
  double t29;
  double t3;
  double t30;
  double t31;
  double t31_tmp;
  double t31_tmp_tmp;
  double t32_tmp;
  double t35;
  double t37_tmp;
  double t4;
  double t41_tmp;
  double t42;
  double t42_tmp;
  double t43_tmp;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  // JT_2_2
  //     JT = JT_2_2(L,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Mar-2023 15:24:56
  t2 = in2[0] * in2[0];
  t3 = in2[1] * in2[1];
  t4 = in2[2] * in2[2];
  t5 = in2[3] * in2[3];
  t6 = t2 + t4;
  t7 = t3 + t5;
  t8 = 1.0 / t6;
  t10 = 1.0 / t7;
  t12 = std::sqrt(t6);
  t6 = std::sqrt(t7);
  t9 = t8 * t8;
  t11 = t10 * t10;
  t14 = 1.0 / t12;
  t16 = 1.0 / t6;
  t7 = l * t12;
  t6 *= l;
  t20 = t12 * 2.0;
  t15 = rt_powd_snf(t14, 3.0);
  t17 = rt_powd_snf(t16, 3.0);
  t21 = std::cos(t7);
  t22 = std::cos(t6);
  t23 = std::sin(t7);
  t24 = std::sin(t6);
  t7 = t2 * t21;
  t28 = t4 * t21;
  t32_tmp = in2[0] * l;
  t35 = t14 * t16 * t23 * t24;
  t12 = t32_tmp * t8;
  t37_tmp = in2[0] * t15;
  t29 = t4 + t7;
  t30 = t2 + t28;
  t31 = t8 * (t21 - 1.0);
  t6 = in2[0] * t9;
  t41_tmp = in2[0] * in2[1];
  b_t41_tmp = t41_tmp * l;
  t43_tmp = t41_tmp * t11;
  t42_tmp = in2[0] * t10;
  b_t42_tmp = t42_tmp * (t22 - 1.0) * -t31;
  t42 = b_t42_tmp * in2[2];
  t31_tmp = t2 * t9;
  b_t31_tmp = l * t2;
  c_t31_tmp = in2[1] * t8;
  d_t31_tmp = -t31 - t35;
  t31_tmp_tmp = l * t8;
  e_t31_tmp = t31_tmp_tmp * t16 * t24;
  JT[0] = ((((((((d_t31_tmp + t31_tmp * (t21 - 1.0) * 2.0) +
                 b_t31_tmp * t15 * t23) -
                c_t31_tmp * t10 * (t22 - 1.0) *
                    (in2[0] * t21 * 2.0 -
                     rt_powd_snf(in2[0], 3.0) * l * t14 * t23)) -
               e_t31_tmp * t7) +
              t2 * t15 * t16 * t23 * t24) +
             t10 * (t22 - 1.0) * -t31 * in2[2] * in2[3]) +
            t41_tmp * t9 * t10 * (t22 - 1.0) * t29 * 2.0) +
           t31_tmp * t10 * (t21 - 1.0) * (t22 - 1.0) * in2[2] * in2[3] * 2.0) +
          b_t31_tmp * t10 * t15 * t23 * (t22 - 1.0) * in2[2] * in2[3];
  t31_tmp = in2[1] * t10;
  f_t31_tmp = in2[1] * t2;
  g_t31_tmp = in2[1] * l;
  h_t31_tmp = t42_tmp * t15;
  i_t31_tmp =
      ((t32_tmp * t15 * t23 * in2[2] + t6 * (t21 - 1.0) * in2[2] * 2.0) +
       t37_tmp * t16 * t23 * t24 * in2[2]) -
      t12 * t16 * t21 * t24 * in2[2];
  j_t31_tmp = l * t4;
  JT[1] = ((((i_t31_tmp + t31_tmp * (t22 - 1.0) * -t31 * in2[2]) +
             t6 * t10 * (t22 - 1.0) * t30 * in2[3] * 2.0) -
            h_t31_tmp * (t22 - 1.0) * in2[3] * (t20 - j_t31_tmp * t23)) +
           f_t31_tmp * t9 * t10 * (t21 - 1.0) * (t22 - 1.0) * in2[2] * 2.0) +
          g_t31_tmp * t2 * t10 * t15 * t23 * (t22 - 1.0) * in2[2];
  t2 = g_t31_tmp * t8;
  JT[2] = ((((((t32_tmp * -t35 - t37_tmp * t23) + t12 * t21) -
              t31_tmp * t14 * t23 * (t22 - 1.0)) +
             f_t31_tmp * t10 * t15 * t23 * (t22 - 1.0)) -
            t2 * t10 * (t22 - 1.0) * t7) +
           h_t31_tmp * t23 * (t22 - 1.0) * in2[2] * in2[3]) -
          t12 * t10 * t21 * (t22 - 1.0) * in2[2] * in2[3];
  f_t31_tmp = t8 * t10 * (t22 - 1.0);
  h_t31_tmp = b_t41_tmp * t17 * t24 * t31 * in2[2] * in2[3] +
              t43_tmp * (t22 - 1.0) * t31 * in2[2] * in2[3] * 2.0;
  JT[3] = ((((h_t31_tmp - f_t31_tmp * t29) +
             t3 * t8 * t11 * (t22 - 1.0) * t29 * 2.0) +
            l * t3 * t8 * t17 * t24 * t29) +
           t41_tmp * t14 * t17 * t23 * t24) -
          b_t41_tmp * t10 * t14 * t22 * t23;
  t7 = g_t31_tmp * t10;
  t12 = in2[0] * t3 * t11;
  t6 = t32_tmp * t3;
  c_t31_tmp = c_t31_tmp * t11 * (t22 - 1.0);
  t2 = t2 * t17 * t24;
  JT[4] = (((((t42 + t12 * (t22 - 1.0) * t31 * in2[2] * 2.0) +
              c_t31_tmp * t30 * in2[3] * 2.0) +
             in2[1] * t14 * t17 * t23 * t24 * in2[2]) -
            t7 * t14 * t22 * t23 * in2[2]) +
           t6 * t17 * t24 * t31 * in2[2]) +
          t2 * t30 * in2[3];
  JT[5] = (((((-in2[1] * t17 * t21 * t24 + t7 * t21 * t22) -
              t42_tmp * t14 * t23 * (t22 - 1.0)) +
             t12 * t14 * t23 * (t22 - 1.0) * 2.0) +
            t6 * t14 * t17 * t23 * t24) +
           in2[1] * t11 * t14 * t23 * (t22 - 1.0) * in2[2] * in2[3] * 2.0) +
          g_t31_tmp * t14 * t17 * t23 * t24 * in2[2] * in2[3];
  JT[6] = ((((i_t31_tmp + b_t42_tmp * in2[3]) +
             in2[1] * t9 * t10 * (t22 - 1.0) * t29 * in2[2] * 2.0) -
            t31_tmp * t15 * (t22 - 1.0) * in2[2] * (t20 - b_t31_tmp * t23)) +
           in2[0] * t4 * t9 * t10 * (t21 - 1.0) * (t22 - 1.0) * in2[3] * 2.0) +
          t32_tmp * t4 * t10 * t15 * t23 * (t22 - 1.0) * in2[3];
  t31_tmp = t41_tmp * t10;
  JT[7] = ((((((((d_t31_tmp + t4 * t9 * (t21 - 1.0) * 2.0) +
                 j_t31_tmp * t15 * t23) -
                f_t31_tmp * in2[3] *
                    (t21 * in2[2] * 2.0 -
                     l * t14 * t23 * rt_powd_snf(in2[2], 3.0))) +
               t31_tmp * (t22 - 1.0) * -t31) -
              e_t31_tmp * t28) +
             t4 * t15 * t16 * t23 * t24) +
            t9 * t10 * (t22 - 1.0) * t30 * in2[2] * in2[3] * 2.0) +
           t41_tmp * t4 * t9 * t10 * (t21 - 1.0) * (t22 - 1.0) * 2.0) +
          b_t41_tmp * t4 * t10 * t15 * t23 * (t22 - 1.0);
  b_t31_tmp = t10 * t14 * t23 * (t22 - 1.0);
  JT[8] = ((((((l * -t35 * in2[2] - t15 * t23 * in2[2]) +
               t31_tmp_tmp * t21 * in2[2]) -
              b_t31_tmp * in2[3]) -
             t31_tmp_tmp * t10 * (t22 - 1.0) * t28 * in2[3]) +
            t4 * t10 * t15 * t23 * (t22 - 1.0) * in2[3]) +
           t31_tmp * t15 * t23 * (t22 - 1.0) * in2[2]) -
          b_t41_tmp * t8 * t10 * t21 * (t22 - 1.0) * in2[2];
  JT[9] = (((((t42 + in2[0] * t5 * t11 * (t22 - 1.0) * t31 * in2[2] * 2.0) +
              c_t31_tmp * t29 * in2[3] * 2.0) +
             in2[0] * t14 * t17 * t23 * t24 * in2[3]) -
            t32_tmp * t10 * t14 * t22 * t23 * in2[3]) +
           t32_tmp * t5 * t17 * t24 * t31 * in2[2]) +
          t2 * t29 * in2[3];
  t31_tmp = l * t10;
  c_t31_tmp = l * t5;
  JT[10] = ((((h_t31_tmp - f_t31_tmp * t30) +
              t5 * t8 * t11 * (t22 - 1.0) * t30 * 2.0) +
             c_t31_tmp * t8 * t17 * t24 * t30) +
            t14 * t17 * t23 * t24 * in2[2] * in2[3]) -
           t31_tmp * t14 * t22 * t23 * in2[2] * in2[3];
  JT[11] = (((((-t17 * t21 * t24 * in2[3] + t31_tmp * t21 * t22 * in2[3]) -
               b_t31_tmp * in2[2]) +
              t5 * t11 * t14 * t23 * (t22 - 1.0) * in2[2] * 2.0) +
             t43_tmp * t14 * t23 * (t22 - 1.0) * in2[3] * 2.0) +
            c_t31_tmp * t14 * t17 * t23 * t24 * in2[2]) +
           b_t41_tmp * t14 * t17 * t23 * t24 * in2[3];
}

// End of code generation (JT_2_2.cpp)
