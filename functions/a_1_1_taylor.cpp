//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// a_1_1_taylor.cpp
//
// Code generation for function 'a_1_1_taylor'
//

// Include files
#include "a_1_1_taylor.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void a_1_1_taylor(double l, const double in2[4], double a[3])
{
  double a_tmp;
  double b_a_tmp;
  double t10;
  double t14;
  double t15;
  double t16;
  double t17;
  double t2;
  double t21;
  double t22;
  double t23;
  double t24;
  double t25;
  double t3;
  double t7;
  double t8;
  double t9;
  // A_1_1_TAYLOR
  //     A = A_1_1_TAYLOR(L,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     18-Apr-2023 09:57:46
  t2 = in2[0] * in2[2];
  t3 = in2[1] * in2[3];
  t7 = rt_powd_snf(l, 4.0);
  t8 = rt_powd_snf(l, 5.0);
  t9 = rt_powd_snf(l, 6.0);
  t10 = rt_powd_snf(l, 7.0);
  t15 = rt_powd_snf(l, 9.0);
  t17 = rt_powd_snf(l, 11.0);
  t14 = t7 * t7;
  t16 = t8 * t8;
  t25 = t2 + t3;
  t21 = in2[0] * in2[0] + in2[1] * in2[1];
  t22 = t25 * t25;
  t23 = t21 * t21;
  t24 = rt_powd_snf(t21, 3.0);
  t25 = t2 * 2.0 + t3 * 2.0;
  t2 = in2[2] * in2[2] * 2.0 + in2[3] * in2[3] * 2.0;
  t3 = in2[0] * t9;
  a_tmp = in2[0] * t14;
  b_a_tmp = in2[0] * t16;
  a[0] = (((((((((t3 * t22 / 90.0 - in2[0] * t7 * t2 / 24.0) -
                 in2[2] * t7 * t25 / 12.0) +
                t3 * t21 * t2 / 360.0) -
               a_tmp * t21 * t22 / 1680.0) +
              b_a_tmp * t22 * t23 / 75600.0) -
             a_tmp * t23 * t2 / 13440.0) +
            b_a_tmp * t24 * t2 / 907200.0) +
           in2[2] * t9 * t21 * t25 / 180.0) -
          in2[2] * t14 * t23 * t25 / 6720.0) +
         in2[2] * t16 * t24 * t25 / 453600.0;
  a[1] = (((((((((in2[3] * t7 * t25 * -0.083333333333333329 +
                  t9 * t22 * in2[1] / 90.0) -
                 t7 * t2 * in2[1] / 24.0) +
                in2[3] * t9 * t21 * t25 / 180.0) -
               in2[3] * t14 * t23 * t25 / 6720.0) +
              in2[3] * t16 * t24 * t25 / 453600.0) +
             t9 * t21 * t2 * in2[1] / 360.0) -
            t14 * t21 * t22 * in2[1] / 1680.0) +
           t16 * t22 * t23 * in2[1] / 75600.0) -
          t14 * t23 * t2 * in2[1] / 13440.0) +
         t16 * t24 * t2 * in2[1] / 907200.0;
  a[2] = (((((((t8 * t22 / 15.0 - rt_powd_snf(l, 3.0) * t2 / 6.0) -
               t17 * (t23 * t23) * t2 / 7.98336E+6) -
              t10 * t21 * t22 / 210.0) +
             t8 * t21 * t2 / 60.0) -
            t10 * t23 * t2 / 1680.0) +
           t15 * t22 * t23 / 7560.0) -
          t17 * t22 * t24 / 498960.0) +
         t15 * t24 * t2 / 90720.0;
}

// End of code generation (a_1_1_taylor.cpp)
