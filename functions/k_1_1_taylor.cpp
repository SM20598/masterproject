//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// k_1_1_taylor.cpp
//
// Code generation for function 'k_1_1_taylor'
//

// Include files
#include "k_1_1_taylor.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void k_1_1_taylor(const double in1[4], double l, double r, double m, double,
                  double, double kvec[2])
{
  double b_t189_tmp;
  double b_t212_tmp;
  double c_t212_tmp;
  double d_t212_tmp;
  double t10;
  double t107;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t151;
  double t152;
  double t16;
  double t17;
  double t176;
  double t185;
  double t186;
  double t189;
  double t189_tmp;
  double t19;
  double t190;
  double t191;
  double t192_tmp;
  double t195;
  double t2;
  double t20;
  double t204;
  double t206;
  double t207;
  double t208;
  double t21;
  double t212;
  double t212_tmp;
  double t213;
  double t214;
  double t22;
  double t222;
  double t29;
  double t3;
  double t31;
  double t32;
  double t33;
  double t34;
  double t35;
  double t36;
  double t38;
  double t39;
  double t4;
  double t40;
  double t41;
  double t42;
  double t43;
  double t44;
  double t45;
  double t46;
  double t47;
  double t48;
  double t5;
  double t52;
  double t53;
  double t54;
  double t57;
  double t59;
  double t59_tmp;
  double t6;
  double t63;
  double t67;
  double t68;
  double t73;
  double t75;
  double t78;
  double t79;
  double t9;
  // K_1_1_TAYLOR
  //     KVEC = K_1_1_TAYLOR(IN1,L,R,M,E,Jxx)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Apr-2023 16:27:14
  t2 = in1[0] * in1[2];
  t3 = in1[0] * in1[3];
  t4 = in1[1] * in1[2];
  t5 = in1[1] * in1[3];
  t6 = in1[0] * in1[0];
  t9 = l * l;
  t10 = rt_powd_snf(l, 3.0);
  t12 = rt_powd_snf(l, 5.0);
  t14 = rt_powd_snf(l, 7.0);
  t15 = r * r;
  t16 = in1[1] * in1[1];
  t22 = rt_powd_snf(l, 11.0);
  t11 = t9 * t9;
  t13 = rt_powd_snf(t9, 3.0);
  t17 = t2 * 2.0;
  t20 = rt_powd_snf(t10, 3.0);
  t21 = rt_powd_snf(t9, 5.0);
  t41 = t2 + t5;
  t29 = t6 + t16;
  t19 = t11 * t11;
  t31 = t41 * t41;
  t32 = t29 * t29;
  t33 = rt_powd_snf(t29, 3.0);
  t35 = t3 - t4;
  t36 = t17 + t5 * 2.0;
  t38 = 1.0 / t29;
  t41 = std::sqrt(t29);
  t42 = in1[2] * in1[2] * 2.0 + in1[3] * in1[3] * 2.0;
  t54 = t15 / 4.0 + t9 / 12.0;
  t34 = t32 * t32;
  t39 = 1.0 / t32;
  t40 = 1.0 / t33;
  t43 = 1.0 / t41;
  t46 = l * t41;
  t44 = rt_powd_snf(t43, 3.0);
  t45 = rt_powd_snf(t43, 5.0);
  t47 = std::cos(t46);
  t48 = std::sin(t46);
  t52 = t2 * t46 * in1[1];
  t53 = t3 * t46 * in1[1];
  t59_tmp = in1[0] * t2;
  t59 = t59_tmp * t46;
  t63 = t5 * t46 * in1[1];
  t57 = t48 * t48;
  t67 = t2 * t48 * in1[1];
  t68 = t3 * t48 * in1[1];
  t73 = t6 * t48;
  t75 = t16 * t48;
  t222 = in1[0] * t3;
  t78 = t222 * t48;
  t79 = t4 * t48 * in1[1];
  t41 = in1[0] * t13;
  t2 = in1[0] * t11;
  t3 = t41 * t29;
  t189_tmp = in1[0] * t19;
  b_t189_tmp = in1[0] * t21;
  t176 = t189_tmp * t32;
  t185 = b_t189_tmp * t33;
  t189 = ((t2 * in1[1] / 12.0 - t3 * in1[1] / 180.0) + t176 * in1[1] / 6720.0) -
         t185 * in1[1] / 453600.0;
  t212_tmp = t12 * t29;
  b_t212_tmp = t14 * t32;
  c_t212_tmp = t20 * t33;
  d_t212_tmp = t22 * t34;
  t212 =
      (((((((-(t12 * t31 / 15.0) + t10 * t42 / 6.0) + t14 * t29 * t31 / 210.0) -
           t212_tmp * t42 / 60.0) +
          b_t212_tmp * t42 / 1680.0) -
         t20 * t31 * t32 / 7560.0) +
        t22 * t31 * t33 / 498960.0) -
       c_t212_tmp * t42 / 90720.0) +
      d_t212_tmp * t42 / 7.98336E+6;
  t213 = (((((((((-(in1[2] * t11 * t36 / 12.0) + t41 * t31 / 90.0) -
                 t2 * t42 / 24.0) +
                in1[2] * t13 * t29 * t36 / 180.0) +
               t3 * t42 / 360.0) -
              t189_tmp * t29 * t31 / 1680.0) -
             in1[2] * t19 * t32 * t36 / 6720.0) +
            b_t189_tmp * t31 * t32 / 75600.0) +
           in1[2] * t21 * t33 * t36 / 453600.0) -
          t176 * t42 / 13440.0) +
         t185 * t42 / 907200.0;
  t214 = (((((((((-(in1[3] * t11 * t36 / 12.0) + t13 * t31 * in1[1] / 90.0) -
                 t11 * t42 * in1[1] / 24.0) +
                in1[3] * t13 * t29 * t36 / 180.0) +
               t13 * t29 * t42 * in1[1] / 360.0) -
              t19 * t29 * t31 * in1[1] / 1680.0) -
             in1[3] * t19 * t32 * t36 / 6720.0) +
            t21 * t31 * t32 * in1[1] / 75600.0) +
           in1[3] * t21 * t33 * t36 / 453600.0) -
          t19 * t32 * t42 * in1[1] / 13440.0) +
         t21 * t33 * t42 * in1[1] / 907200.0;
  t31 = t16 + t6 * t47;
  t107 = t6 + t16 * t47;
  t151 = t16 * t46 + t73;
  t152 = t6 * t46 + t75;
  b_t189_tmp = m * t6;
  t176 = b_t189_tmp * t16 * t39 * t54 * ((t47 - 1.0) * (t47 - 1.0));
  t185 = ((t52 + t63) + t78) - t67;
  t186 = ((t53 + t59) + t79) - t68;
  t190 = t35 * t36 * t39 * (t47 - 1.0) + l * t35 * t36 * t44 * t48 / 2.0;
  t42 = in1[0] * l * t36 * t38;
  t191 =
      (in1[2] * t43 * t48 + t42 * t47 / 2.0) - in1[0] * t36 * t44 * t48 / 2.0;
  t192_tmp = l * t36 * t38;
  t36 = (in1[3] * t43 * t48 + t192_tmp * t47 * in1[1] / 2.0) -
        t36 * t44 * t48 * in1[1] / 2.0;
  t189_tmp = m * t15;
  t195 = (t189_tmp * (t47 * t47) / 2.0 + b_t189_tmp * t38 * t54 * t57) +
         m * t16 * t38 * t54 * t57;
  t2 = in1[0] * m;
  t41 = t2 * t39 * t54 * (t47 - 1.0);
  t3 = t2 * t15;
  t204 = (t3 * t38 * t57 * in1[1] / 2.0 + t41 * t31 * in1[1]) +
         t41 * t107 * in1[1];
  t206 = ((((((t63 + t17 * t46 * in1[1]) + t78) + t222 * -t46) - t67 * 3.0) +
           t5 * t48 * in1[1] * -2.0) +
          t47 * t52) +
         t47 * t63;
  t41 = t2 * t44;
  t207 = (-(t3 * t43 * t47 * t48 / 2.0) + t41 * t54 * (t47 - 1.0) * t75) +
         t41 * t48 * t54 * t31;
  t41 = m * t44;
  t208 = (-(t189_tmp * t43 * t47 * t48 * in1[1] / 2.0) +
          t41 * t54 * (t47 - 1.0) * t73 * in1[1]) +
         t41 * t48 * t54 * t107 * in1[1];
  t41 = m * t39 * t54;
  t43 = (t189_tmp * t16 * t38 * t57 / 2.0 + t41 * (t107 * t107)) + t176;
  t5 = (b_t189_tmp * t15 * t38 * t57 / 2.0 + t41 * (t31 * t31)) + t176;
  t41 = -in1[0] * t40;
  t17 = t46 - t48;
  t73 = t41 * t185 * in1[1] * t17 + t40 * t151 * t186;
  t63 = t41 * t186 * in1[1] * t17 + t40 * t152 * t185;
  t75 = in1[0] * t38 * (t47 - 1.0);
  t2 = (t42 * t57 / 2.0 + t75 * t36 * in1[1]) + t38 * t31 * t191;
  t36 =
      (t192_tmp * t57 * in1[1] / 2.0 + t75 * t191 * in1[1]) + t38 * t107 * t36;
  t222 = -in1[0] * t35 * t45 * (t47 - 1.0) * in1[1] * t17 + t75 * t2;
  t78 = t38 * (t47 - 1.0);
  t67 = in1[0] * t35 * t45 * (t47 - 1.0) * in1[1] * t17 + t78 * t36 * in1[1];
  t52 = t35 * t45;
  t41 = t52 * (t47 - 1.0);
  t42 = t41 * t152 + t78 * t2 * in1[1];
  t31 = t41 * t151 - t75 * t36;
  t176 = -t44 * t152;
  t185 = in1[0] * t44;
  b_t189_tmp = (((t9 / 2.0 - t11 * t29 / 24.0) + t13 * t32 / 720.0) -
                t19 * t33 / 40320.0) +
               t21 * t34 / 3.6288E+6;
  t3 = t44 * t186;
  t189_tmp = t185 * t204 * in1[1] * t17;
  t2 = t52 * (((((((t59 + t53 * 2.0) + t79) + -t4 * t46 * in1[1]) - t68 * 3.0) +
                t59_tmp * t48 * -2.0) +
               t47 * t53) +
              t47 * t59);
  t41 = t35 * t38 * (t47 - 1.0);
  kvec[0] =
      ((((t36 * ((t207 * t63 + t5 * t42) + t204 * t67) +
          m * ((t212 * ((((in1[0] * t10 / 3.0 - in1[0] * t12 * t29 / 30.0) +
                          in1[0] * t14 * t32 / 840.0) -
                         in1[0] * t20 * t33 / 45360.0) +
                        in1[0] * t22 * t34 / 3.99168E+6) -
                t189 * t214) +
               t213 *
                   ((((b_t189_tmp - t6 * t11 / 12.0) + t6 * t13 * t29 / 180.0) -
                     t6 * t19 * t32 / 6720.0) +
                    t6 * t21 * t33 / 453600.0))) +
         t190 * ((t176 * t208 + t78 * t195 * in1[1]) +
                 t185 * t207 * in1[1] * t17)) -
        t3 * ((t208 * t63 + t43 * t67) + t204 * t42)) +
       t2 * ((t176 * t204 + t78 * t207 * in1[1]) + t185 * t5 * in1[1] * t17)) +
      (t52 * t206 * ((t176 * t43 + t78 * t208 * in1[1]) + t189_tmp) -
       t41 * ((t195 * t63 + t207 * t42) + t208 * t67));
  t176 = -t44 * t151;
  kvec[1] =
      ((((-t36 * ((t207 * t73 + t5 * t222) - t204 * t31) -
          t190 * ((t176 * t207 + t75 * t195) + t185 * t208 * in1[1] * t17)) +
         m * ((-t189 * t213 +
               t212 * ((((t10 * in1[1] / 3.0 - t212_tmp * in1[1] / 30.0) +
                         b_t212_tmp * in1[1] / 840.0) -
                        c_t212_tmp * in1[1] / 45360.0) +
                       d_t212_tmp * in1[1] / 3.99168E+6)) +
              t214 * ((((b_t189_tmp - t11 * t16 / 12.0) +
                        t13 * t16 * t29 / 180.0) -
                       t16 * t19 * t32 / 6720.0) +
                      t16 * t21 * t33 / 453600.0))) +
        t3 * ((t208 * t73 + t204 * t222) - t43 * t31)) -
       t2 * ((t176 * t5 + t75 * t207) + t189_tmp)) +
      (-t35 * t45 * t206 *
           ((t176 * t204 + t75 * t208) + t185 * t43 * in1[1] * t17) +
       t41 * ((t195 * t73 + t207 * t222) - t208 * t31));
}

// End of code generation (k_1_1_taylor.cpp)
