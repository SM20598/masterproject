//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// wcrl_3_1.cpp
//
// Code generation for function 'wcrl_3_1'
//

// Include files
#include "wcrl_3_1.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void wcrl_3_1(double l, const double in2[12], double wcrl[9])
{
  double t11;
  double t12;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t2;
  double t23;
  double t3;
  double t30;
  double t30_tmp;
  double t31_tmp;
  double t4;
  double t5;
  double t9;
  // WCRL_3_1
  //     WCRL = WCRL_3_1(L,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     11-Apr-2023 15:52:18
  t2 = in2[0] * in2[7];
  t3 = in2[1] * in2[6];
  t4 = in2[0] * in2[0];
  t5 = in2[1] * in2[1];
  t9 = t4 + t5;
  t11 = in2[0] * in2[6] * 2.0 + in2[1] * in2[7] * 2.0;
  t12 = 1.0 / t9;
  t9 = std::sqrt(t9);
  t14 = 1.0 / t9;
  t16 = l * t9;
  t15 = rt_powd_snf(t14, 3.0);
  t17 = std::cos(t16);
  t18 = std::sin(t16);
  t19 = t18 * t18;
  t23 = (t2 - t3) * t12 * (t17 - 1.0);
  t30_tmp = in2[0] * l * t11 * t12;
  t30 = (in2[6] * t14 * t18 + t30_tmp * t17 / 2.0) -
        in2[0] * t11 * t15 * t18 / 2.0;
  t31_tmp = l * t11 * t12;
  t9 = (in2[7] * t14 * t18 + t31_tmp * t17 * in2[1] / 2.0) -
       t11 * t15 * t18 * in2[1] / 2.0;
  wcrl[0] = 0.0;
  wcrl[1] = -t23;
  t14 = in2[0] * t12 * (t17 - 1.0);
  wcrl[2] =
      (-t12 * t30 * (t5 + t4 * t17) - t30_tmp * t19 / 2.0) - t14 * t9 * in2[1];
  wcrl[3] = t23;
  wcrl[4] = 0.0;
  wcrl[5] = (-t12 * t9 * (t4 + t5 * t17) - t14 * t30 * in2[1]) -
            t31_tmp * t19 * in2[1] / 2.0;
  wcrl[6] =
      t15 * (((in2[6] * t4 * t16 + t2 * t16 * in2[1]) - t2 * t18 * in2[1]) +
             t3 * t18 * in2[1]);
  wcrl[7] =
      t15 * (((in2[0] * t3 * t16 + in2[0] * t2 * t18) + in2[0] * -t3 * t18) +
             in2[7] * t5 * t16);
  wcrl[8] = 0.0;
}

// End of code generation (wcrl_3_1.cpp)
