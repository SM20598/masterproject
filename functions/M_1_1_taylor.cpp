//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// M_1_1_taylor.cpp
//
// Code generation for function 'M_1_1_taylor'
//

// Include files
#include "M_1_1_taylor.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void M_1_1_taylor(const double in1[4], double l, double r, double m, double,
                  double, double Mmat[4])
{
  double t10;
  double t106;
  double t107;
  double t108;
  double t109;
  double t11;
  double t113_tmp;
  double t117;
  double t118;
  double t119;
  double t12;
  double t13;
  double t14;
  double t15;
  double t17;
  double t2;
  double t21;
  double t22;
  double t25;
  double t26;
  double t28;
  double t3;
  double t31;
  double t32;
  double t34;
  double t35;
  double t36;
  double t38;
  double t4;
  double t42;
  double t45;
  double t5;
  double t51;
  double t53;
  double t6;
  double t62;
  double t7;
  double t71;
  double t8;
  double t9;
  // M_1_1_taylor
  //     Mmat = M_1_1_taylor(IN1,L,R,M,E,Jxx)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Apr-2023 16:27:13
  t2 = in1[0] * in1[0];
  t3 = l * l;
  t4 = rt_powd_snf(l, 3.0);
  t6 = rt_powd_snf(l, 5.0);
  t8 = rt_powd_snf(l, 7.0);
  t9 = r * r;
  t10 = in1[1] * in1[1];
  t14 = rt_powd_snf(l, 11.0);
  t5 = t3 * t3;
  t7 = rt_powd_snf(t3, 3.0);
  t12 = rt_powd_snf(t4, 3.0);
  t13 = rt_powd_snf(t3, 5.0);
  t15 = t3 / 2.0;
  t17 = t2 + t10;
  t11 = t5 * t5;
  t21 = t17 * t17;
  t22 = rt_powd_snf(t17, 3.0);
  t25 = 1.0 / t17;
  t28 = std::sqrt(t17);
  t38 = t5 * t17 / 24.0;
  t42 = t9 / 4.0 + t3 / 12.0;
  t3 = t21 * t21;
  t26 = 1.0 / t21;
  t31 = 1.0 / t28;
  t34 = l * t28;
  t28 = t7 * t21 / 720.0;
  t62 = t11 * t22 / 40320.0;
  t32 = rt_powd_snf(t31, 3.0);
  t35 = std::cos(t34);
  t36 = std::sin(t34);
  t71 = t13 * t3 / 3.6288E+6;
  t45 = t36 * t36;
  t51 = t2 * t36;
  t53 = t10 * t36;
  t106 = ((in1[0] * t5 * in1[1] / 12.0 - in1[0] * t7 * t17 * in1[1] / 180.0) +
          in1[0] * t11 * t21 * in1[1] / 6720.0) -
         in1[0] * t13 * t22 * in1[1] / 453600.0;
  t108 = (((in1[0] * t4 / 3.0 - in1[0] * t6 * t17 / 30.0) +
           in1[0] * t8 * t21 / 840.0) -
          in1[0] * t12 * t22 / 45360.0) +
         in1[0] * t14 * t3 / 3.99168E+6;
  t109 = (((t4 * in1[1] / 3.0 - t6 * t17 * in1[1] / 30.0) +
           t8 * t21 * in1[1] / 840.0) -
          t12 * t22 * in1[1] / 45360.0) +
         t14 * t3 * in1[1] / 3.99168E+6;
  t117 = (((((((t15 - t2 * t5 / 12.0) - t38) + t28) + t2 * t7 * t17 / 180.0) -
            t62) +
           t71) -
          t2 * t11 * t21 / 6720.0) +
         t2 * t13 * t22 / 453600.0;
  t118 = (((((((t15 - t5 * t10 / 12.0) - t38) + t28) + t7 * t10 * t17 / 180.0) -
            t62) +
           t71) -
          t10 * t11 * t21 / 6720.0) +
         t10 * t13 * t22 / 453600.0;
  t4 = t10 + t2 * t35;
  t13 = t2 + t10 * t35;
  t107 = t106 * t106;
  t6 = m * t2;
  t8 = t6 * t10 * t26 * t42 * ((t35 - 1.0) * (t35 - 1.0));
  t15 = m * t9;
  t38 = (t15 * (t35 * t35) / 2.0 + t6 * t25 * t42 * t45) +
        m * t10 * t25 * t42 * t45;
  t113_tmp = in1[0] * t25 * (t35 - 1.0);
  t22 = t25 * (t35 - 1.0);
  t28 = in1[0] * m;
  t3 = t28 * t26 * t42 * (t35 - 1.0);
  t5 = t28 * t9;
  t119 = (t5 * t25 * t45 * in1[1] / 2.0 + t3 * t4 * in1[1]) + t3 * t13 * in1[1];
  t3 = t28 * t32;
  t21 = (-(t5 * t31 * t35 * t36 / 2.0) + t3 * t42 * (t35 - 1.0) * t53) +
        t3 * t36 * t42 * t4;
  t3 = m * t32;
  t11 = (-(t15 * t31 * t35 * t36 * in1[1] / 2.0) +
         t3 * t42 * (t35 - 1.0) * t51 * in1[1]) +
        t3 * t36 * t42 * t13 * in1[1];
  t3 = m * t26 * t42;
  t17 = (t15 * t10 * t25 * t45 / 2.0 + t3 * (t13 * t13)) + t8;
  t28 = (t6 * t9 * t25 * t45 / 2.0 + t3 * (t4 * t4)) + t8;
  t7 = t32 * (t10 * t34 + t51);
  t15 = t32 * (t2 * t34 + t53);
  t13 = m * ((-(t108 * t109) + t106 * t117) + t106 * t118);
  t71 = in1[0] * t32;
  t4 = t34 - t36;
  t8 = t22 * in1[1];
  t3 = t71 * t119 * in1[1] * t4;
  t14 = t71 * in1[1] * t4;
  t12 = (t22 * t21 * in1[1] - t15 * t119) + t71 * t28 * in1[1] * t4;
  t62 = (t22 * t38 * in1[1] - t15 * t11) + t71 * t21 * in1[1] * t4;
  t6 = (-(t15 * t17) + t22 * t11 * in1[1]) + t3;
  t5 = (-(t7 * t28) + t113_tmp * t21) + t3;
  t28 = (t113_tmp * t38 - t7 * t21) + t71 * t11 * in1[1] * t4;
  t3 = (t113_tmp * t11 - t7 * t119) + t71 * t17 * in1[1] * t4;
  Mmat[0] = ((m * ((t107 + t108 * t108) + t117 * t117) - t15 * t6) + t8 * t62) +
            t14 * t12;
  Mmat[1] = ((-t13 + t15 * t3) - t8 * t28) - t14 * t5;
  Mmat[2] = ((-t13 + t7 * t12) - t113_tmp * t62) - t14 * t6;
  Mmat[3] =
      ((m * ((t107 + t109 * t109) + t118 * t118) - t7 * t5) + t113_tmp * t28) +
      t14 * t3;
}

// End of code generation (M_1_1_taylor.cpp)
