//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// k_1_1.cpp
//
// Code generation for function 'k_1_1'
//

// Include files
#include "k_1_1.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void k_1_1(const double in1[4], double l, double r, double m, double, double,
           double kvec[2])
{
  double b_t168_tmp;
  double c_t168_tmp;
  double t10;
  double t11;
  double t12;
  double t122;
  double t135;
  double t136;
  double t136_tmp;
  double t145;
  double t146;
  double t147_tmp;
  double t147_tmp_tmp;
  double t149;
  double t150;
  double t150_tmp;
  double t151;
  double t151_tmp;
  double t154;
  double t154_tmp;
  double t161;
  double t163;
  double t166;
  double t167;
  double t168;
  double t168_tmp;
  double t172;
  double t173;
  double t181;
  double t19;
  double t2;
  double t21;
  double t22;
  double t23;
  double t24;
  double t25;
  double t26;
  double t27;
  double t28;
  double t29;
  double t3;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t36;
  double t37;
  double t38;
  double t4;
  double t41;
  double t43;
  double t43_tmp;
  double t46;
  double t5;
  double t50;
  double t51;
  double t53;
  double t55;
  double t56;
  double t56_tmp;
  double t57;
  double t6;
  double t71;
  double t72;
  double t76;
  double t87;
  double t88;
  double t9;
  // K_1_1
  //     KVEC = K_1_1(IN1,L,R,M,E,Jxx)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Apr-2023 16:47:30
  t2 = in1[0] * in1[2];
  t3 = in1[0] * in1[3];
  t4 = in1[1] * in1[2];
  t5 = in1[1] * in1[3];
  t6 = in1[0] * in1[0];
  t9 = l * l;
  t10 = r * r;
  t11 = in1[1] * in1[1];
  t12 = t2 * 2.0;
  t27 = t2 + t5;
  t19 = t6 + t11;
  t21 = t27 * t27;
  t22 = t3 - t4;
  t23 = t12 + t5 * 2.0;
  t24 = 1.0 / t19;
  t27 = std::sqrt(t19);
  t28 = in1[2] * in1[2] * 2.0 + in1[3] * in1[3] * 2.0;
  t38 = t10 / 4.0 + t9 / 12.0;
  t25 = t24 * t24;
  t26 = rt_powd_snf(t24, 3.0);
  t29 = 1.0 / t27;
  t32 = l * t27;
  t30 = rt_powd_snf(t29, 3.0);
  t31 = rt_powd_snf(t29, 5.0);
  t33 = std::cos(t32);
  t34 = std::sin(t32);
  t36 = t2 * t32 * in1[1];
  t37 = t3 * t32 * in1[1];
  t43_tmp = in1[0] * t2;
  t43 = t43_tmp * t32;
  t46 = t5 * t32 * in1[1];
  t41 = t34 * t34;
  t50 = t2 * t34 * in1[1];
  t51 = t3 * t34 * in1[1];
  t53 = t6 * t34;
  t55 = t11 * t34;
  t56_tmp = in1[0] * t3;
  t56 = t56_tmp * t34;
  t57 = t4 * t34 * in1[1];
  t122 = t28 * t30 * t34 / 2.0;
  t71 = t11 + t6 * t33;
  t72 = t6 + t11 * t33;
  t76 = t24 * (t33 - 1.0);
  t87 = t11 * t32 + t53;
  t88 = t6 * t32 + t55;
  t181 = m * t6;
  t135 = t181 * t11 * t25 * t38 * ((t33 - 1.0) * (t33 - 1.0));
  t136_tmp = in1[0] * l;
  t3 = in1[0] * t25;
  t136 = t136_tmp * t30 * t34 * in1[1] + t3 * (t33 - 1.0) * in1[1] * 2.0;
  t145 = ((t36 + t46) + t56) - t50;
  t146 = ((t37 + t43) + t57) - t51;
  t147_tmp_tmp = t22 * t31;
  t147_tmp = t147_tmp_tmp * (t33 - 1.0);
  t149 = t22 * t23 * t25 * (t33 - 1.0) + l * t22 * t23 * t30 * t34 / 2.0;
  t150_tmp = t136_tmp * t23 * t24;
  t150 = (in1[2] * t29 * t34 + t150_tmp * t33 / 2.0) -
         in1[0] * t23 * t30 * t34 / 2.0;
  t151_tmp = l * t23 * t24;
  t151 = (in1[3] * t29 * t34 + t151_tmp * t33 * in1[1] / 2.0) -
         t23 * t30 * t34 * in1[1] / 2.0;
  t154_tmp = m * t10;
  t154 = (t154_tmp * (t33 * t33) / 2.0 + t181 * t24 * t38 * t41) +
         m * t11 * t24 * t38 * t41;
  t168_tmp = t9 * t21;
  b_t168_tmp = l * t21;
  c_t168_tmp = l * t24;
  t168 = (((b_t168_tmp * t25 * t33 * 3.0 - t21 * t31 * t34 * 3.0) +
           t168_tmp * t30 * t34) -
          c_t168_tmp * t28 * t33 / 2.0) +
         t122;
  t27 = in1[0] * m;
  t19 = t27 * t25 * t38 * (t33 - 1.0);
  t2 = t27 * t10;
  t163 =
      (t2 * t24 * t41 * in1[1] / 2.0 + t19 * t71 * in1[1]) + t19 * t72 * in1[1];
  t19 = t27 * t30;
  t166 = (-(t2 * t29 * t33 * t34 / 2.0) + t19 * t38 * (t33 - 1.0) * t55) +
         t19 * t34 * t38 * t71;
  t19 = m * t30;
  t167 = (-(t154_tmp * t29 * t33 * t34 * in1[1] / 2.0) +
          t19 * t38 * (t33 - 1.0) * t53 * in1[1]) +
         t19 * t34 * t38 * t72 * in1[1];
  t172 = (((((in1[0] * t9 * t21 * t25 * t33 + in1[2] * l * t23 * t30 * t34) +
             in1[2] * t23 * t25 * (t33 - 1.0) * 2.0) -
            t136_tmp * t21 * t31 * t34 * 5.0) +
           t3 * t28 * (t33 - 1.0)) -
          in1[0] * t21 * t26 * (t33 - 1.0) * 8.0) +
         t136_tmp * t122;
  t173 = (((((t168_tmp * t25 * t33 * in1[1] + in1[3] * l * t23 * t30 * t34) +
             in1[3] * t23 * t25 * (t33 - 1.0) * 2.0) -
            b_t168_tmp * t31 * t34 * in1[1] * 5.0) +
           t25 * t28 * (t33 - 1.0) * in1[1]) -
          t21 * t26 * (t33 - 1.0) * in1[1] * 8.0) +
         l * t122 * in1[1];
  t19 = m * t25 * t38;
  t161 = (t154_tmp * t11 * t24 * t41 / 2.0 + t19 * (t72 * t72)) + t135;
  t21 = (t181 * t10 * t24 * t41 / 2.0 + t19 * (t71 * t71)) + t135;
  t19 = -in1[0] * t26;
  t23 = t32 - t34;
  t38 = t19 * t145 * in1[1] * t23 + t26 * t87 * t146;
  t135 = t19 * t146 * in1[1] * t23 + t26 * t88 * t145;
  t9 = in1[0] * t76;
  t19 = (t150_tmp * t41 / 2.0 + t9 * t151 * in1[1]) + t24 * t71 * t150;
  t28 = (t151_tmp * t41 * in1[1] / 2.0 + t9 * t150 * in1[1]) + t24 * t72 * t151;
  t181 = -in1[0] * t22 * t31 * (t33 - 1.0) * in1[1] * t23 + t9 * t19;
  t29 = in1[0] * t22 * t31 * (t33 - 1.0) * in1[1] * t23 + t76 * t28 * in1[1];
  t19 = t147_tmp * t88 + t76 * t19 * in1[1];
  t154_tmp = in1[0] * t30;
  t168_tmp = -t30 * t88;
  b_t168_tmp = l * t30;
  t3 = t30 * t146;
  t122 = t154_tmp * t163 * in1[1] * t23;
  t2 = t147_tmp_tmp *
       (((((((t43 + t37 * 2.0) + t57) + -t4 * t32 * in1[1]) - t51 * 3.0) +
          t43_tmp * t34 * -2.0) +
         t33 * t37) +
        t33 * t43);
  t27 = t147_tmp_tmp *
        (((((((t46 + t12 * t32 * in1[1]) + t56) + t56_tmp * -t32) - t50 * 3.0) +
           t5 * t34 * in1[1] * -2.0) +
          t33 * t36) +
         t33 * t46);
  kvec[0] = (((((t28 * ((t166 * t135 + t21 * t19) + t163 * t29) +
                 t149 * ((t168_tmp * t167 + t76 * t154 * in1[1]) +
                         t154_tmp * t166 * in1[1] * t23)) +
                m * ((t172 * ((-t76 + b_t168_tmp * t53) +
                              t6 * t25 * (t33 - 1.0) * 2.0) +
                      t136 * t173) +
                     t168 * (t154_tmp * t34 - t136_tmp * t24 * t33))) +
               t22 * -t76 * ((t154 * t135 + t166 * t19) + t167 * t29)) -
              t3 * ((t167 * t135 + t161 * t29) + t163 * t19)) +
             t2 * ((t168_tmp * t163 + t76 * t166 * in1[1]) +
                   t154_tmp * t21 * in1[1] * t23)) +
            t27 * ((t168_tmp * t161 + t76 * t167 * in1[1]) + t122);
  t168_tmp = t147_tmp * t87 - t9 * t28;
  t19 = t30 * t87;
  kvec[1] =
      (((((-t28 * ((t166 * t38 + t21 * t181) - t163 * t168_tmp) -
           t149 * ((t9 * t154 - t19 * t166) + t154_tmp * t167 * in1[1] * t23)) +
          m * ((t173 * ((-t76 + b_t168_tmp * t55) +
                        t11 * t25 * (t33 - 1.0) * 2.0) +
                t168 * (t30 * t34 * in1[1] - c_t168_tmp * t33 * in1[1])) +
               t136 * t172)) +
         t22 * t76 * ((t154 * t38 + t166 * t181) - t167 * t168_tmp)) +
        t3 * ((t167 * t38 + t163 * t181) - t161 * t168_tmp)) -
       t2 * ((t9 * t166 - t19 * t21) + t122)) -
      t27 * ((t9 * t167 - t19 * t163) + t154_tmp * t161 * in1[1] * t23);
}

// End of code generation (k_1_1.cpp)
