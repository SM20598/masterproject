//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// M_1_1.cpp
//
// Code generation for function 'M_1_1'
//

// Include files
#include "M_1_1.h"
#include "limits"
#include <cmath>

// Function Declarations
static double rt_powd_snf(double u0, double u1);

// Function Definitions
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = std::numeric_limits<double>::quiet_NaN();
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = std::numeric_limits<double>::infinity();
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = std::numeric_limits<double>::infinity();
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = std::numeric_limits<double>::quiet_NaN();
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

void M_1_1(const double in1[4], double l, double r, double m, double, double,
           double Mmat[4])
{
  double t10;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t18;
  double t2;
  double t21;
  double t25;
  double t27;
  double t29;
  double t30;
  double t36;
  double t37;
  double t37_tmp;
  double t38;
  double t4;
  double t5;
  double t62;
  double t62_tmp;
  double t65;
  double t66;
  double t7;
  double t73;
  double t74;
  double t76;
  double t76_tmp;
  double t77;
  double t78;
  double t79_tmp;
  double t85;
  double t85_tmp;
  double t86;
  double t87;
  double t9;
  // M_1_1
  //     Mmat = M_1_1(IN1,L,R,M,E,Jxx)
  //     This function was generated by the Symbolic Math Toolbox version 9.2.
  //     23-Apr-2023 16:47:29
  t2 = in1[0] * in1[0];
  t4 = r * r;
  t5 = in1[1] * in1[1];
  t7 = t2 + t5;
  t9 = 1.0 / t7;
  t7 = std::sqrt(t7);
  t18 = t4 / 4.0 + l * l / 12.0;
  t10 = t9 * t9;
  t12 = 1.0 / t7;
  t14 = l * t7;
  t13 = rt_powd_snf(t12, 3.0);
  t15 = std::cos(t14);
  t16 = std::sin(t14);
  t21 = t16 * t16;
  t25 = t2 * t16;
  t27 = t5 * t16;
  t37_tmp = in1[0] * t13;
  t37 = t37_tmp * t16;
  t38 = t13 * t16 * in1[1];
  t29 = t5 + t2 * t15;
  t30 = t2 + t5 * t15;
  t36 = t9 * (t15 - 1.0);
  t62_tmp = m * t2;
  t62 = t62_tmp * t5 * t10 * t18 * ((t15 - 1.0) * (t15 - 1.0));
  t65 = l * t37 * in1[1] + in1[0] * t10 * (t15 - 1.0) * in1[1] * 2.0;
  t76_tmp = m * t4;
  t76 = (t76_tmp * (t15 * t15) / 2.0 + t62_tmp * t9 * t18 * t21) +
        m * t5 * t9 * t18 * t21;
  t66 = t65 * t65;
  t7 = l * t13;
  t73 = (-t36 + t7 * t27) + t5 * t10 * (t15 - 1.0) * 2.0;
  t74 = (-t36 + t7 * t25) + t2 * t10 * (t15 - 1.0) * 2.0;
  t79_tmp = in1[0] * t36;
  t78 = in1[0] * m;
  t7 = t78 * t10 * t18 * (t15 - 1.0);
  t85_tmp = t78 * t4;
  t85 = (t85_tmp * t9 * t21 * in1[1] / 2.0 + t7 * t29 * in1[1]) +
        t7 * t30 * in1[1];
  t7 = m * t18;
  t86 = (-(t85_tmp * t12 * t15 * t16 / 2.0) +
         t78 * t13 * t18 * (t15 - 1.0) * t27) +
        t7 * t29 * t37;
  t87 = (-(t76_tmp * t12 * t15 * t16 * in1[1] / 2.0) +
         m * t13 * t18 * (t15 - 1.0) * t25 * in1[1]) +
        t7 * t30 * t38;
  t7 = m * t10 * t18;
  t77 = (t76_tmp * t5 * t9 * t21 / 2.0 + t7 * (t30 * t30)) + t62;
  t78 = (t62_tmp * t4 * t9 * t21 / 2.0 + t7 * (t29 * t29)) + t62;
  t25 = t13 * (t5 * t14 + t25);
  t62 = t13 * (t2 * t14 + t27);
  t62_tmp = in1[0] * l * t9 * t15 - t37;
  t29 = l * t9 * t15 * in1[1] - t38;
  t21 = m * ((t62_tmp * t29 + t65 * t74) + t65 * t73);
  t85_tmp = t14 - t16;
  t7 = t37_tmp * t85 * in1[1] * t85_tmp;
  t18 = t37_tmp * in1[1] * t85_tmp;
  t10 = (t36 * t76 * in1[1] - t62 * t87) + t37_tmp * t86 * in1[1] * t85_tmp;
  t30 = (t36 * t86 * in1[1] - t62 * t85) + t37_tmp * t78 * in1[1] * t85_tmp;
  t76_tmp = (-(t62 * t77) + t36 * t87 * in1[1]) + t7;
  t12 = (t79_tmp * t76 - t25 * t86) + t37_tmp * t87 * in1[1] * t85_tmp;
  t78 = (-(t25 * t78) + t79_tmp * t86) + t7;
  t7 = (t79_tmp * t87 - t25 * t85) + t37_tmp * t77 * in1[1] * t85_tmp;
  Mmat[0] = ((m * ((t66 + t62_tmp * t62_tmp) + t74 * t74) - t62 * t76_tmp) +
             t36 * in1[1] * t10) +
            t18 * t30;
  Mmat[1] = ((t21 + t62 * t7) + -t36 * in1[1] * t12) - t18 * t78;
  Mmat[2] = ((t21 + in1[0] * -t36 * t10) + t25 * t30) - t18 * t76_tmp;
  Mmat[3] =
      ((m * ((t66 + t29 * t29) + t73 * t73) + t79_tmp * t12) - t25 * t78) +
      t18 * t7;
}

// End of code generation (M_1_1.cpp)
